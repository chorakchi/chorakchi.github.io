/* eslint no-console: 0 */

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _recursiveReaddirSync = require("recursive-readdir-sync");

var _recursiveReaddirSync2 = _interopRequireDefault(_recursiveReaddirSync);

var WebpackCleanupPlugin = (function () {
  function WebpackCleanupPlugin() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, WebpackCleanupPlugin);

    this.options = options;
  }

  _createClass(WebpackCleanupPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      var outputPath = compiler.options.output.path;

      compiler.plugin("done", function (stats) {
        var _options$exclude = _this.options.exclude;
        var exclude = _options$exclude === undefined ? [] : _options$exclude;

        // recursiveReadSync returns prefix of outputPath + "/"
        var offset = outputPath.length + 1;
        var assets = stats.toJson().assets.map(function (asset) {
          return asset.name;
        });
        var files = (0, _recursiveReaddirSync2["default"])(outputPath).map(function (path) {
          return path.substr(offset);
        }).filter(function (file) {
          return exclude.indexOf(file) === -1 && assets.indexOf(file) === -1;
        }).map(function (file) {
          return outputPath + "/" + file;
        });

        files.forEach(_fs2["default"].unlinkSync);

        console.log("\nWebpackCleanupPlugin: %s file(s) deleted.", files.length);
      });
    }
  }]);

  return WebpackCleanupPlugin;
})();

exports["default"] = WebpackCleanupPlugin;
module.exports = exports["default"];
//# sourceMappingURL=WebpackCleanupPlugin.js.map